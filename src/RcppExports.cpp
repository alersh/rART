// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// train
void train(List net, NumericMatrix x);
RcppExport SEXP _rART_train(SEXP netSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type net(netSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    train(net, x);
    return R_NilValue;
END_RCPP
}
// predict
List predict(List net, int id, NumericMatrix x);
RcppExport SEXP _rART_predict(SEXP netSEXP, SEXP idSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type net(netSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(net, id, x));
    return rcpp_result_gen;
END_RCPP
}
// newART
List newART(int dimension, int num, double vigilance, double learningRate, int categorySize, int maxEpochs);
RcppExport SEXP _rART_newART(SEXP dimensionSEXP, SEXP numSEXP, SEXP vigilanceSEXP, SEXP learningRateSEXP, SEXP categorySizeSEXP, SEXP maxEpochsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    Rcpp::traits::input_parameter< double >::type vigilance(vigilanceSEXP);
    Rcpp::traits::input_parameter< double >::type learningRate(learningRateSEXP);
    Rcpp::traits::input_parameter< int >::type categorySize(categorySizeSEXP);
    Rcpp::traits::input_parameter< int >::type maxEpochs(maxEpochsSEXP);
    rcpp_result_gen = Rcpp::wrap(newART(dimension, num, vigilance, learningRate, categorySize, maxEpochs));
    return rcpp_result_gen;
END_RCPP
}
// linkClusters
List linkClusters(IntegerVector edges, IntegerVector nodes);
RcppExport SEXP _rART_linkClusters(SEXP edgesSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(linkClusters(edges, nodes));
    return rcpp_result_gen;
END_RCPP
}
// encodeNumericLabel
NumericMatrix encodeNumericLabel(NumericVector labels, List code);
RcppExport SEXP _rART_encodeNumericLabel(SEXP labelsSEXP, SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< List >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeNumericLabel(labels, code));
    return rcpp_result_gen;
END_RCPP
}
// encodeStringLabel
NumericMatrix encodeStringLabel(StringVector labels, List code);
RcppExport SEXP _rART_encodeStringLabel(SEXP labelsSEXP, SEXP codeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< List >::type code(codeSEXP);
    rcpp_result_gen = Rcpp::wrap(encodeStringLabel(labels, code));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_rART_train", (DL_FUNC) &_rART_train, 2},
    {"_rART_predict", (DL_FUNC) &_rART_predict, 3},
    {"_rART_newART", (DL_FUNC) &_rART_newART, 6},
    {"_rART_linkClusters", (DL_FUNC) &_rART_linkClusters, 2},
    {"_rART_encodeNumericLabel", (DL_FUNC) &_rART_encodeNumericLabel, 2},
    {"_rART_encodeStringLabel", (DL_FUNC) &_rART_encodeStringLabel, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rART(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
